Observer design pattern is based on communicating changes in state of object to observers so that they can take there action.

Simple example is a weather system where change in weather must be reflected in Views to show to public. 
Here weather object is Subject while different views are Observers

Subject --> Observers

For Example Company updates all its shareholders for any decision they make here Company is Subject and Shareholders are Observers, any change in policy of company and Company notifies all its Shareholders or Observer.

This is beautiful pattern and used heavily along with Model View Controller Design pattern 
where change in model is propagated to view so that it can render it with modified information




How are Observer and Observable used?
- The observable class represents an observable object.
- The object to be observed can be represented by sub-classing observable class.
- When there is a change in an observable instance, 
	an application calling the Observable's notifyObservers method causes all of its observers 
	to be notified of the change by a call to their update method.


Observer pattern is used when there is one-to-many relationship between objects such as if one object is modified,
its depenedent objects are to be notified automatically.

Observer pattern uses three actor classes.
Subject, Observer and Client.

Subject is an object having methods to attach and detach observers to a client object.
We have created an abstract class Observer and a concrete class Subject that is extending class Observer.

