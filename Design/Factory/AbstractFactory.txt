Abstract Factory Pattern
Abstract Factory patterns work around a super-factory which creates other factories.

Let’s take an example, Suppose we want to build a global car factory. 
If it was factory design pattern, then it was suitable for a single location. 
But for this pattern, we need multiple locations and some critical design changes.

We need car factories in each location like IndiaCarFactory, USACarFactory and DefaultCarFactory. 
Now, our application should be smart enough to identify the location where it is being used, 
so we should be able to use appropriate car factory 
without even knowing which car factory implementation will be used internally. 
This also saves us from someone calling wrong factory for a particular location.

Here we need another layer of abstraction which will identify the location 
and internally use correct car factory implementation without even giving a single hint to user. 
This is exactly the problem, which abstract factory pattern is used to solve.