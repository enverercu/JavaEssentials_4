In design, adapters are used when we have a class (Client) expecting some type of object and
we have an object (Adaptee) offering the same features but exposing a different interface.

To use an adapter:
The client makes a request to the adapter by calling a method on it using the target interface.
The adapter translates that request on the adaptee using the adaptee interface.
Client receive the results of the call and is unaware of adapter’s presence.

The adapter pattern convert the interface of a class into another interface clients expect.
Adapter lets classes work together that couldn’t otherwise because of incompatible interfaces.

Suppose you have a Bird class with fly() , and makeSound()methods. And also a ToyDuck class with squeak() method.
Let’s assume that you are short on ToyDuck objects and you would like to use Bird objects in their place.
Birds have some similar functionality but implement a different interface, so we can’t use them directly.
So we will use adapter pattern. Here our client would be ToyDuck and adaptee would be Bird.